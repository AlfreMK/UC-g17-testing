# Automatically generated by Pynguin.
import src.clock_display as module_0


def test_case_0():
    try:
        str_0 = '<n.br,i//h1"cD|k\'+D'
        clock_display_0 = module_0.ClockDisplay(str_0)
        assert len(clock_display_0.numbers) == 19
        var_0 = clock_display_0.increment()
    except BaseException:
        pass


def test_case_1():
    try:
        bytes_0 = b'\x0f\xf0\xae\xdf\x1c>&e\x10~\x1ei\x10^%'
        clock_display_0 = module_0.ClockDisplay(bytes_0)
        assert len(clock_display_0.numbers) == 15
        var_0 = clock_display_0.str()
        assert var_0 == '00:00:00:00:00:00:00:00:00:00:00:00:00:00:00'
        str_0 = 'dyX\\Z)c\r(K`Kb*L-h'
        var_1 = clock_display_0.invariant()
        var_2 = clock_display_0.str()
        assert var_2 == '00:00:00:00:00:00:00:00:00:00:00:00:00:00:00'
        clock_display_1 = module_0.ClockDisplay(str_0)
        assert len(clock_display_1.numbers) == 17
        var_3 = clock_display_1.increment()
    except BaseException:
        pass


def test_case_2():
    try:
        str_0 = "f'paYiD.g+f1o"
        clock_display_0 = module_0.ClockDisplay(str_0)
        assert len(clock_display_0.numbers) == 13
        var_0 = clock_display_0.str()
        assert var_0 == '00:00:00:00:00:00:00:00:00:00:00:00:00'
        set_0 = set()
        str_1 = '!HLg'
        clock_display_1 = module_0.ClockDisplay(str_1)
        assert len(clock_display_1.numbers) == 4
        var_1 = clock_display_1.clone()
        assert len(var_1.numbers) == 4
        clock_display_2 = module_0.ClockDisplay(set_0)
        assert clock_display_2.numbers == []
        var_2 = clock_display_2.str()
        int_0 = -973
        clock_display_3 = module_0.ClockDisplay(int_0)
    except BaseException:
        pass


def test_case_3():
    try:
        bytes_0 = b'\x7f\x1b/i\xd0 7!\xb4]\x88'
        clock_display_0 = module_0.ClockDisplay(bytes_0)
        assert len(clock_display_0.numbers) == 11
        var_0 = clock_display_0.clone()
        assert len(var_0.numbers) == 11
        bool_0 = True
        var_1 = clock_display_0.increment()
        assert var_1 is None
        var_2 = clock_display_0.clone()
        assert len(var_2.numbers) == 11
        str_0 = ''
        set_0 = {bool_0, bool_0, str_0}
        clock_display_1 = module_0.ClockDisplay(set_0)
        assert len(clock_display_1.numbers) == 2
        var_3 = clock_display_1.str()
        assert var_3 == '00:00'
        var_4 = clock_display_1.increment()
    except BaseException:
        pass
