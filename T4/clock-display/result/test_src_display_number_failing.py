# Automatically generated by Pynguin.
import pytest
import src.display_number as module_0


def test_case_0():
    try:
        bool_0 = True
        bytes_0 = b'g\x92\xad~\x0f\x8fV\x97\xba\xbcg\xe9\xc8\xb7\xe2\xcb\xb3'
        number_display_0 = module_0.NumberDisplay(bool_0, bytes_0)
        assert number_display_0.value is True
        assert number_display_0.limit == b'g\x92\xad~\x0f\x8fV\x97\xba\xbcg\xe9\xc8\xb7\xe2\xcb\xb3'
        var_0 = number_display_0.increase()
    except BaseException:
        pass


def test_case_1():
    try:
        float_0 = 1655.9295
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        number_display_0 = module_0.NumberDisplay(float_0, dict_0)
        assert number_display_0.value == pytest.approx(1655.9295, abs=0.01,
            rel=0.01)
        assert len(number_display_0.limit) == 1
        var_0 = number_display_0.reset()
        assert number_display_0.value == 0
        var_1 = number_display_0.clone()
        assert var_1.value == 0
        assert len(var_1.limit) == 1
        var_2 = number_display_0.invariant()
    except BaseException:
        pass


def test_case_2():
    try:
        str_0 = '{zk.cw[Vv%+"IAUx'
        int_0 = 2532
        str_1 = 'ENm=zWr.}>C/PE*S'
        int_1 = 1
        number_display_0 = module_0.NumberDisplay(str_1, int_1)
        assert number_display_0.value == 'ENm=zWr.}>C/PE*S'
        assert number_display_0.limit == 1
        bool_0 = False
        number_display_1 = module_0.NumberDisplay(number_display_0, bool_0)
        assert number_display_1.limit is False
        number_display_2 = module_0.NumberDisplay(number_display_1, bool_0)
        assert number_display_2.limit is False
        var_0 = number_display_2.reset()
        assert number_display_2.value == 0
        str_2 = "'(d^@ffq1)7qKeCGr"
        number_display_3 = module_0.NumberDisplay(int_0, str_2)
        assert number_display_3.value == 2532
        assert number_display_3.limit == "'(d^@ffq1)7qKeCGr"
        var_1 = number_display_3.clone()
        assert var_1.value == 2532
        assert var_1.limit == "'(d^@ffq1)7qKeCGr"
        var_2 = number_display_3.clone()
        assert var_2.value == 2532
        assert var_2.limit == "'(d^@ffq1)7qKeCGr"
        var_3 = number_display_3.str()
        assert var_3 == '2532'
        var_4 = number_display_3.str()
        assert var_4 == '2532'
        dict_0 = {str_0: str_0}
        tuple_0 = ()
        number_display_4 = module_0.NumberDisplay(dict_0, tuple_0)
        assert number_display_4.value == {'{zk.cw[Vv%+"IAUx':
            '{zk.cw[Vv%+"IAUx'}
        assert number_display_4.limit == ()
        str_3 = ".'VC"
        str_4 = '5/'
        number_display_5 = module_0.NumberDisplay(str_3, str_4)
        assert number_display_5.value == ".'VC"
        assert number_display_5.limit == '5/'
        var_5 = number_display_3.reset()
        assert number_display_3.value == 0
        var_6 = number_display_2.increase()
    except BaseException:
        pass
